@using ClinicaWeb.Models
@model ClinicaWeb.Controllers.Dashboard
@using System
@{

    List<Factura> fact = ViewBag.facturas;
    var culture = new System.Globalization.CultureInfo("es-NI");
    if (User.IsInRole("Paciente"))
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    else
    {
        ViewBag.Title = "Panel Principal";
        Layout = "~/Views/Shared/_LayoutSis.cshtml";
        ViewBag.L0 = "active";
        ViewBag.R0 = "active";
        ViewBag.A0 = "active";
    }
}

@{
    double result = Model.Annio.FirstOrDefault().Monto;
    double last = Model.Annio.LastOrDefault().Monto;
    double final = 0;


    final = (last / result) * 100;


}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="row">
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@ViewBag.Orders</h3>

                <p>Nuevas Ordenes</p>
            </div>
            <div class="icon">
                <i class="ion ion-bag"></i>
            </div>
            <a href="@Url.Action("index","Ordens")" class="small-box-footer">Mas info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@Math.Round(final, 2)<sup style="font-size: 20px">%</sup></h3>

                <p>% de ventas en el mes</p>
            </div>
            <div class="icon">
                <i class="ion ion-stats-bars"></i>
            </div>
            <a href="@Url.Action("index","Facturas")" class="small-box-footer">Mas info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@ViewBag.pacientes</h3>

                <p>Registro de Usuarios</p>
            </div>
            <div class="icon">
                <i class="ion ion-person-add"></i>
            </div>
            <a href="@Url.Action("index","Pacientes")" class="small-box-footer">Mas info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@ViewBag.examen</h3>

                <p>Examenes en existencia</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            <a href="@Url.Action("index","Examen")" class="small-box-footer">Mas info <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <!-- /.col -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header border-0">
                <div class="d-flex justify-content-between">
                    <h3 class="card-title">Ventas en el mes</h3>
                </div>
            </div>
            <div class="card-body">
                @*<div class="d-flex">
                        <p class="ml-auto d-flex flex-column text-right">
                            <span class="text-success">
                                <i class="fas fa-arrow-up"></i> %@Math.Round(final, 2)
                            </span>
                            <span class="text-muted">Porcentaje de ventas</span>
                        </p>
                    </div>*@
                <!-- /.d-flex -->

                <div class="position-relative mb-4">
                    <canvas id="visitors-chart" height="250"></canvas>
                </div>
            </div>
        </div>

    </div>
    <!-- /.col-md-6 -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header border-0">
                <div class="d-flex justify-content-between">
                    <h3 class="card-title">Examenes con mayor demanda</h3>
                </div>
            </div>
            <div class="card-body">
                <div class="d-flex">
                    <p class="d-flex flex-column">
                        <span class="text-bold text-lg">@Model.Mes.Sum(x => x.Cant) Examenes</span>
                    </p>
                </div>
                <!-- /.d-flex -->

                <div class="position-relative mb-4">
                    <canvas id="sales-chart" height="200"></canvas>
                </div>
            </div>
        </div>
        <!-- /.card -->
    </div>
</div>
<!-- /.row -->

@section scripts{
    <script>

        /* global Chart:false */

        $(function () {
            'use strict'

            var ticksStyle = {
                fontColor: '#495057',
                fontStyle: 'bold'
            }

            var mode = 'index'
            var intersect = true

            var meses = [];
            var examenes = [];
            var montos = [];

            @{
                double MaxCant = 0;
                foreach (var item in Model.Mes.OrderByDescending(x => x.Cant))
                {

                    @:examenes.push('@item.exa.Nombre_exa');
                    @:montos.push(@item.Cant);
                    if (item.Cant > MaxCant)
                    { MaxCant = item.Cant; }


                    @*@:meses.push('@System.DateTime.Parse(item.FechaFac).ToString("MMM")');
                    @:examenes.push('@item.DetalleFactura.FirstOrDefault().Orden.DetalleOrden.FirstOrDefault().Examen.Nombre_exa');
                    @:montos.push(@item.DetalleFactura.FirstOrDefault().Cantidad);*@
                }
            }


            var $salesChart = $('#sales-chart')
            // eslint-disable-next-line no-unused-vars
            var salesChart = new Chart($salesChart, {
                type: 'bar',
                data: {
                    labels: examenes,
                    datasets: [
                        {
                            label:'Examenes',
                            backgroundColor: '#007bff',
                            borderColor: '#007bff',
                            data: montos
                        }
                    ]
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        mode: mode,
                        intersect: intersect
                    },
                    hover: {
                        mode: mode,
                        intersect: intersect
                    },
                    legend: {
                        display: true
                    },
                    scales: {
                        yAxes: [{
                            // display: false,
                            gridLines: {
                                display: true,
                                lineWidth: '4px',
                                color: 'rgba(0, 0, 0, .2)',
                                zeroLineColor: 'transparent'
                            },
                            ticks: $.extend({
                                beginAtZero: true,
                                suggestedMax:@MaxCant+@Model.Mes.Sum(x => x.Cant),
                                // Include a dollar sign in the ticks
                                //callback: function (value) {
                                //    if (value >= 1000) {
                                //        value /= 1000
                                //        value += 'k'
                                //    }

                                //    return '$' + value
                            }, ticksStyle)
                        }],
                        xAxes: [{
                            display: true,
                            gridLines: {
                                display: false
                            },
                            ticks: ticksStyle
                        }]
                    }
                }
            })

            var Total = [];
            var mes = [];

            @{
                double Maxannio = 0;
                foreach (var item in Model.Annio.OrderBy(x => x.Dia))
                {


                     @:mes.push('@culture.DateTimeFormat.GetAbbreviatedMonthName(item.Dia.Month)');
                     @:Total.push('@(item.Monto)');
                     if (item.Monto > Maxannio)
                    { Maxannio = item.Monto; }

                }
            }

            var $visitorsChart = $('#visitors-chart')
            // eslint-disable-next-line no-unused-vars
            var visitorsChart = new Chart($visitorsChart, {
                data: {
                    labels: mes,
                    datasets: [{
                        label: 'Ingresos',
                        type: 'line',
                        data: Total,
                        backgroundColor: 'transparent',
                        borderColor: '#007bff',
                        pointBorderColor: '#007bff',
                        pointBackgroundColor: '#007bff',
                        fill: false
                        // pointHoverBackgroundColor: '#007bff',
                        // pointHoverBorderColor    : '#007bff'
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        mode: mode,
                        intersect: intersect
                    },
                    hover: {
                        mode: mode,
                        intersect: intersect
                    },
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            //display: false,
                            gridLines: {
                                display: true,
                                lineWidth: '4px',
                                color: 'rgba(0, 0, 0, .2)',
                                zeroLineColor: 'transparent'
                            },
                            ticks: $.extend({
                                beginAtZero: true,
                                suggestedMax: @((Maxannio + Model.Annio.Average(x => x.Monto))),
                                //callback: function (value) {
                                //    if (value >= 1000) {
                                //        value /= 1000
                                //        value += 'k'
                                //    }

                                //    return '$' + value
                                //}
                            }, ticksStyle)
                        }],
                        xAxes: [{
                            display: true,
                            gridLines: {
                                display: true
                            },
                            ticks: ticksStyle
                        }]
                    }
                }
            })
        })

        // lgtm [js/unused-local-variable]




    </script>

}
